// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: rate_limiter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RateLimiterClient is the client API for RateLimiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimiterClient interface {
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	ShouldForwardRequest(ctx context.Context, in *ShouldForwardsRequestRequest, opts ...grpc.CallOption) (*ShouldForwardRequestResponse, error)
}

type rateLimiterClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimiterClient(cc grpc.ClientConnInterface) RateLimiterClient {
	return &rateLimiterClient{cc}
}

func (c *rateLimiterClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	out := new(RegisterServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.RateLimiter/RegisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) ShouldForwardRequest(ctx context.Context, in *ShouldForwardsRequestRequest, opts ...grpc.CallOption) (*ShouldForwardRequestResponse, error) {
	out := new(ShouldForwardRequestResponse)
	err := c.cc.Invoke(ctx, "/proto.RateLimiter/ShouldForwardRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimiterServer is the server API for RateLimiter service.
// All implementations must embed UnimplementedRateLimiterServer
// for forward compatibility
type RateLimiterServer interface {
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	ShouldForwardRequest(context.Context, *ShouldForwardsRequestRequest) (*ShouldForwardRequestResponse, error)
}

// UnimplementedRateLimiterServer must be embedded to have forward compatible implementations.
type UnimplementedRateLimiterServer struct {
}

func (UnimplementedRateLimiterServer) RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedRateLimiterServer) ShouldForwardRequest(context.Context, *ShouldForwardsRequestRequest) (*ShouldForwardRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldForwardRequest not implemented")
}

// UnsafeRateLimiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimiterServer will
// result in compilation errors.
type UnsafeRateLimiterServer interface {
	mustEmbedUnimplementedRateLimiterServer()
}

func RegisterRateLimiterServer(s grpc.ServiceRegistrar, srv RateLimiterServer) {
	s.RegisterService(&RateLimiter_ServiceDesc, srv)
}

func _RateLimiter_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RateLimiter/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_ShouldForwardRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShouldForwardsRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).ShouldForwardRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RateLimiter/ShouldForwardRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).ShouldForwardRequest(ctx, req.(*ShouldForwardsRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimiter_ServiceDesc is the grpc.ServiceDesc for RateLimiter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimiter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RateLimiter",
	HandlerType: (*RateLimiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _RateLimiter_RegisterService_Handler,
		},
		{
			MethodName: "ShouldForwardRequest",
			Handler:    _RateLimiter_ShouldForwardRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rate_limiter.proto",
}
